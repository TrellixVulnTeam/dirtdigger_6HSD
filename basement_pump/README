The ADC lib comes from 
Fetch URL: https://github.com/adafruit/Adafruit_Python_ADS1x15.git
Push  URL: https://github.com/adafruit/Adafruit_Python_ADS1x15.git


email

url = https://github.com/pradeesi/email-from-raspberry-pi.git

sockets start here
https://docs.python.org/2/library/socketserver.html#SocketServer.BaseServer.server_address

https://pymotw.com/2/SocketServer/

socket client.py

import socket
import sys

HOST, PORT = "localhost", 9999
data = " ".join(sys.argv[1:])

# Create a socket (SOCK_STREAM means a TCP socket)
#3.6 version
#with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
# Create a socket (SOCK_STREAM means a TCP socket)
sock =socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
# Connect to server and send data
sock.connect((HOST, PORT))
sock.sendall(bytes(data + "\n"))

# Receive data from the server and shut down
received = str(sock.recv(1024))

print("Sent:     {}".format(data))
print("Received: {}".format(received))


socket server.py
import socketserver

class MyAltTCPHandler(socketserver.StreamRequestHandler):
    def handle(self):
        # self.rfile is a file-like object created by the handler;
        # we can now use e.g. readline() instead of raw recv() calls
        self.data = self.rfile.readline().strip()
        print("{} wrote:".format(self.client_address[0]))
        print(self.data)
        # Likewise, self.wfile is a file-like object used to write back
        # to the client
        self.wfile.write(self.data.upper())
                                                            
class MyTCPHandler(socketserver.BaseRequestHandler):
    """
    The request handler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.

    """
    
    def handle(self):
        # self.request is the TCP socket connected to the client
        self.data = self.request.recv(1024).strip()
        print("{} wrote:".format(self.client_address[0]))
        print(self.data)
        # just send back the same data, but upper-cased
        self.request.sendall(self.data.upper())

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999
    # this works pre 3.6 
    server = socketserver.TCPServer((HOST, PORT), MyTCPHandler)
    # Create the server, binding to localhost on port 9999
    #    with socketserver.TCPServer((HOST, PORT), MyTCPHandler) as server:
    # Activate the server; this will keep running until you
    # interrupt the program with Ctrl-C
    server.serve_forever()
